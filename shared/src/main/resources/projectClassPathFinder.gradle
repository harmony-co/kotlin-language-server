allprojects { project ->
    task kotlinLSPProjectDeps {
        doLast {
            println ""
            println "gradle-version $gradleVersion"
            println "kotlin-lsp-project ${project.name}"

            // Handle Android configurations
            if (project.hasProperty('android')) {
                project.android.bootClasspath.each {
                    println "kotlin-lsp-gradle $it"
                }

                def variants = []
                if (project.android.hasProperty('applicationVariants')) {
                    variants += project.android.applicationVariants
                }
                if (project.android.hasProperty('libraryVariants')) {
                    variants += project.android.libraryVariants
                }

                variants.each { variant ->
                    def variantBase = variant.name.replaceAll("-", File.separator)

                    def buildClasses = "${project.buildDir}/intermediates/${variantBase}/classes"
                    println "kotlin-lsp-gradle $buildClasses"

                    def userClasses = "${project.buildDir}/intermediates/javac/${variantBase}/compile${variantBase.capitalize()}JavaWithJavac/classes"
                    println "kotlin-lsp-gradle $userClasses"

                    def userVariantClasses = "${project.buildDir}/intermediates/javac/${variantBase}/classes"
                    println "kotlin-lsp-gradle $userVariantClasses"

                    // Determine the correct configuration name
                    def configName = "${variant.name}CompileClasspath"
                    def classpath = project.configurations.findByName(configName)
                    if (classpath != null) {
                        classpath.each {
                            println "kotlin-lsp-gradle $it"
                        }
                    } else {
                        println "kotlin-lsp-gradle: Configuration '$configName' not found"
                    }
                }
            }

            // Handle non-Android source sets
            if (project.hasProperty('sourceSets')) {
                def useCompileClasspath = project.hasProperty("useCompileClasspath")

                project.sourceSets.each { sourceSet ->
                    def classPathSource = useCompileClasspath ? sourceSet.compileClasspath : sourceSet.runtimeClasspath
                    classPathSource.each {
                        println "kotlin-lsp-gradle $it"
                    }
                }
            }

            // Handle Kotlin Multiplatform dependencies
            def kotlinExtension = project.extensions.findByName("kotlin")
            if (kotlinExtension && kotlinExtension.hasProperty("targets")) {
                kotlinExtension.targets.names.each { targetName ->
                    def configName = "${targetName}CompileClasspath"
                    def classpath = project.configurations.findByName(configName)
                    if (classpath != null) {
                        classpath.files.each {
                            println "kotlin-lsp-gradle $it"
                        }
                    } else {
                        println "kotlin-lsp-gradle: Configuration '$configName' not found"
                    }
                }
            }
        }
    }

    task kotlinLSPAllGradleDeps {
        doLast {
            fileTree("${gradle.gradleHomeDir}/lib")
                .findAll { it.toString().endsWith('.jar') }
                .forEach { println "kotlin-lsp-gradle $it" }
        }
    }
}
